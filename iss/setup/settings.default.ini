; Default parameters
;
; Do not modify this file!  If you would like to change a value, create a new
; settings.ini file and set only the parameters you would like to be different
; than those found in this file.


[file_names]
; directory where raw nd2 files are
input_dir =

; directory where notebook is saved
output_dir =

; directory where tile tiff files saved
tile_dir =

; Names of nd2 files for the imaging rounds
round =

; Name of the file for the anchor round. Leave empty if not using anchor.
anchor =

;
raw_extension = .nd2

; csv file giving the approximate raw intensity for each dye with each camera/laser combination.
; if not set, the dye_camera_laser_raw_intensity.csv file in the project will be used
dye_camera_laser =

; text file which contains the codes indicating which dye to expect on each round for each gene
code_book =

; if true, tile and channel index in tile tiff file names will start at 1 else start at 0.
matlab_tile_names = False

; can be a tiff file indicating average spot shape, otherwise if deconvolution required, will be computed automatically
; in extract step (this is psf before tapering and scaled to fill uint16 range).
psf =

; Can be a tiff file indicating average shape in omp coefficient image.
; It only indicates the sign of the coefficient i.e. only contains -1, 0, 1.
; If not specified, it is computed from the coefficient images of all genes of the central tile.
omp_spot_shape =


[basic_info]
; Whether to use the 3d pipeline.
is_3d =

; Channel in anchor round used as reference and to build coordinate system on. Usually channel with most spots.
; Leave blank if no DAPI.
anchor_channel =

; Channel in anchor round that contains DAPI images. Leave blank if no DAPI.
dapi_channel =

; Round to align all imaging rounds to
; will be set to anchor_round if anchor_channel and anchor file specified
ref_round =

; Channel in reference round used as reference and to build coordinate system on. Usually channel with most spots.
; will be set to anchor_channel if anchor_channel and anchor file specified
ref_channel =

; Channels in imaging rounds to use throughout pipeline. Leave blank to use all.
use_channels =

; Imaging rounds to use throughout pipeline. Leave blank to use all.
use_rounds =

; z planes used to make tile tiff files. Leave blank to use all.
use_z =

; Tiles used throughout pipeline. Leave blank to use all.
use_tiles =

; Dyes to use when when assigning spots to genes. Leave blank to use all.
use_dyes =

; name of dyes used in correct order so for gene with code 360...,
; gene appears with dye_names[3] in round 0, dye_names[6] in round 1, dye_names[0] in round 2 etc.
; if do not provide then assumes each channel corresponds to a different dye i.e. code 0 in code book = channel 0
; so for quad_cam data, this needs to be specified
dye_names =

; channel_camera[i], channel_laser[i] are the wavelengths in nm of the camera/laser used on channel i.
; only need to be provided if dye_names provided to help estimate dye intensity on each channel.
channel_camera =
channel_laser =

; tile_pixel_value_shift is added onto every tile (except DAPI) when it is saved and
; removed from every tile when loaded. Required so we can have negative pixel values when save to tiff as uint16.
tile_pixel_value_shift = 15000

; Previously had cases where first z plane in nd2 file was in wrong place and
; caused focus stacking to be weird or identify lots of spots on first plane
; hence safest to not load first plane which is done if this is True.
ignore_first_z_plane = True


[extract]
; time to wait for raw data to come in before crashing
; assume first round is already in the input_directory
; Want this large so can run pipeline while collecting data.
wait_time = 21600

; These specify the dimensions of the convolve_2d. R1 should be approximately the
; size of the spot (in pixels) in the respective direction and R2 should be double this (in pixels).
; Leave empty to auto-detect.
r1 =
r2 =

; radius of DAPI convolve_2d in units of pixels
r_dapi =

; if r1 and r_dapi not specified. Will convert to units of pixels from
; these micron values
; if r2 not specified, it will be twice r1.
r1_auto_microns = 0.5
r_dapi_auto_microns = 8.0


; Each filtered image is multiplied by scale. This is
; because the image is saved as uint16 so to gain information from
; the decimal points, should multiply image so max pixel number is
; in the 10,000s (less than 65,536).

; Normalization factor for the tiff images.  Leave empty to auto-detect.
scale =

; If scale not given, it sets to
; scale_norm/max(Tile ExtractScaleTile, round 0).
scale_norm = 40000

; Have different normalisation for anchor round/anchor channel as not
; used in final spot_colors
scale_anchor =

; auto_thresh[t,r,c] is default threshold to find spots on tile t, round r, channel c
; value of auto_thresh is auto_thresh_multiplier*median(abs(ScaledFilteredTile)).
auto_thresh_multiplier = 10

; for 3d pipeline, whether to perform deconvolution before hanning filtering
deconvolve  = False

; to detect spot, pixel needs to be above dilation with this radius in xy plane
psf_detect_radius_xy = 2

; to detect spot, pixel needs to be above dilation with this radius in z direction
psf_detect_radius_z = 1

; spots contribute to psf if they are above this intensity. If not given, will be computed the same as auto_thresh
; i.e. median(image) + auto_thresh_multiplier*median(abs(image-median(image)))
; note that for raw data, median(image) is not zero hence the difference.
psf_intensity_thresh =

; spots contribute to psf if more than psf_isolation_dist from nearest spot.
psf_isolation_dist = 20

; need this many isolated spots to determine psf
psf_min_spots = 300

; diameter of psf in y, x, z direction (in units of [xy_pixels, xy_pixels, z_pixels]).
psf_shape = 181, 181, 19

; psf is assumed to be radially symmetric within each z-plane so assume all values within annulus of this size
; (in xy_pixels) to be the same.
psf_annulus_width = 1.4

; TODO: auto way of determining this
wiener_constant = 50000

; pad to raw image to median value linearly with this many pixels at end of each dimension
wiener_pad_shape = 20, 20, 3

; radius of fspecial filter to do smoothing of filtered image.
; Provide one number to do 2D smoothing and three numbers to do 3D smoothing.
; Typical 2D: 2
; Typical 3d: 2, 2, 2
; Leave empty to do no smoothing.
r_smooth =


[find_spots]
; to detect spot, pixel needs to be above dilation with structuring element which is
; a square (np.ones) of width 2*radius_xy-1 in the xy plane
radius_xy = 2

; to detect spot, pixel needs to be above dilation with structuring element which is
; cuboid (np.ones) with width 2*radius_z-1 in z direction. Must be more than 1 to be 3D.
radius_z = 2

; if number of spots detected on particular z-plane of an imaging round is greater than
; this, then will only select the max_spots most intense
; spots on that z-plane. I.e. PCR works better if trying to fit fewer more intense
; spots. This only applies to imaging rounds and not reference round
; and channel as need lots of spots for this image.
; different default values for 2d and 3d pipeline
max_spots_2d = 1500
max_spots_3d = 500

; filter to determine if spots are isolated is annulus between isolation_radius_inner and isolation_radius
isolation_radius_inner = 4
isolation_radius_xy = 14
isolation_radius_z = 1

; spot is isolated if value of annular filtered image at spot location is below the isolation_thresh value.
; if not given, then value will be set to auto_isolation_thresh_multiplier multiplied by the threshold used
; to detect the spots i.e. the extract_auto_thresh value.
isolation_thresh =
auto_isolation_thresh_multiplier = -0.2

[stitch]

; expected fractional overlap between tiles. Used to get initial shift search if not provided
expected_overlap = 0.1

; if shift_south, shift_east not given, the initial shift search will have auto_n_shifts either side of the expected
; shift given the expected_overlap with step given by shift_step.
; First value gives n_shifts in direction of overlap (y for south, x for west).
; Second value gives n_shifts in other direction (x for south, y for west).
; Third value gives n_shifts in z.
auto_n_shifts = 20, 20, 1

; below gives an option to manually specify initial shifts. Shift range will run between min to max
; with step given by shift_step. Each entry should be a list of 3 values: [y, x, z].

; Typical: [-1900, -100, -2]
shift_south_min =

; Typical: [-1700, 100, 2]
shift_south_max =

; Typical: [-100, -1900, -2]
shift_west_min =

; Typical: [100, -1700, 2]
shift_west_max =

; step size to use in y, x, z when finding shift between tiles
shift_step = 5, 5, 2

; if shift in initial search range has score which does not exceed shift_score_thresh, then range will be extrapolated
; with same step by shift_widen values in y, x, z direction.
shift_widen = 10, 10, 4

; basically the distance in yx pixels below which neighbours are a good match.
neighb_dist_thresh = 2

; a shift between tiles must have a number of close neighbours exceeding this.
; if not given, it will be worked out as median + shift_score_auto_param*IQR of search scores.
shift_score_thresh =

; parameter to work out shift_score_thresh if not given
shift_score_auto_param = 2


[register_initial]
; channel to use to find shifts between rounds to use as starting point for PCR.
; if not selected, will set to reference_channel.
shift_channel =

; Shift range will run between min to max with step given by shift_step.
; Each entry should be a list of 3 values: [y, x, z].

; Typical: [-100, -100, -1]
shift_min = -100, -100, -1

; Typical: [100, 100, 1]
shift_max = 100, 100, 1

; step size to use in y, x, z when finding shift between tiles
shift_step = 5, 5, 2

; if shift in initial search range has score which does not exceed shift_score_thresh, then range will be extrapolated
; with same step by shift_widen values in y, x, z direction.
shift_widen = 20, 20, 2

; basically the distance in yx pixels below which neighbours are a good match.
neighb_dist_thresh = 2

; a shift between tiles must have a number of close neighbours exceeding this.
; if not given, it will be worked out as median + shift_score_auto_param*IQR of search scores.
shift_score_thresh =

; parameter to work out shift_score_thresh if not given
shift_score_auto_param = 2

[register]

; maximum number iterations to run point cloud registration, PCR
n_iter = 100

; basically the distance in yx pixels below which neighbours are a good match. PCR updates transforms
; by minimising distances between neighbours which are closer than this.
; TODO: In MATLAB, this was 5 for 3d and 3 for 2d but z pixel usually more > 5 anyway so not sure important
neighb_dist_thresh_2d = 3
neighb_dist_thresh_3d = 5

; if PCR produces transforms with fewer neighbours (pairs with distance between < neighb_dist_thresh) than
; matches_thresh = np.clip(matches_thresh_fract * n_spots, matches_thresh_min, matches_thresh_max)
; the transform will be re-evaluated with regularization so it is near the average transform.
matches_thresh_fract = 0.25
matches_thresh_min = 25
matches_thresh_max = 300

; If a transform has a chromatic aberration scaling that has an absolute deviation of more than
; scale_dev_thresh[i] from the median for that colour channel in dimension i,
; it will be re-evaluated with regularization.
; There is a threshold for the y, x, z scaling
scale_dev_thresh = 0.005, 0.005, 0.005

; If a transform has a shift[i] that has an absolute deviation of more than
; shift_dev_thresh[i] from the median for that tile and round in any dimension i,
; it will be re-evaluated with regularization.
; There is a threshold for the y, x, z shift. z threshold is in z pixels
shift_dev_thresh = 11, 11, 3

; constant used for scaling and rotation when doing regularized least squares.
regularize_constant_scale = 30000

; constant used for shift when doing regularized least squares.
; We want to allow for a rotation deviation of around 0.0003 and a shift deviation of around 9
; hence the difference in constants.
; TODO: check regularization params, may not work in 3d because z shift is on different scale to xy shift even after putting both in xy pixel units
regularize_constant_shift = 9


[call_spots]

; single or separate
; single: a single bleed matrix is produced for all rounds
; separate: a different bleed matrix is made for each round
bleed_matrix_method = single

; parameters used to get color normalisation factor.
; color_norm_intensities should be ascending and color_norm_probs should be descending and they should be the same size.
; probability of normalised spot color being greater than color_norm_intensities[i] must be less than color_norm_probs[i].
color_norm_intensities = 0.5, 1, 5
color_norm_probs = 0.01, 5e-4, 1e-5

; In scaled_k_means part of bleed_matrix calculation, a mean vector for each dye is computed from
; all spots with a dot_product to that mean greater than this.
bleed_matrix_score_thresh = 0

; shift to apply to weighting of each background vector to limit boost of weak spots.
; The weighting of round r for the fitting of the background vector for channel c is
; 1 / (spot_color[r, c] + background_weight_shift) so background_weight_shift ensures
; this does not go to infinity for small spot_color[r, c].
; Typical spot_color[r, c] is 1 for intense spot so background_weight_shift is small fraction of this.
background_weight_shift =

; When calculating the dot_product_score, this is the small shift to apply when normalising spot_colors
; to ensure don't divide by zero.
; Value is for a single round and is multiplied by sqrt(n_rounds_used) when computing dot_product_score
; Expected norm of a spot_color for a single round is 1 so dp_norm_shift is a small fraction of this.
dp_norm_shift =

; quality_threshold requires intensity computed with get_spot_intensity to exceed this.
; Parameter to automatically determine dp_norm_shift, background_weight_shift and intensity_thresh.
; They are all set to norm_shift_auto_param * median(absolute_pixel_intensities of middle z-plane)
; Work out from this because norm_shift is basically a small fraction of the expected L2 norm of spot_color in a single
; round and this is basically what spot_intensity gives.
; It is also clamped between the min and max values.
norm_shift_auto_param = 0.1
norm_shift_min = 0.001
norm_shift_max = 0.5

; dp_norm_shift and background_weight_shift will be rounded to nearest norm_shift_precision.
; intensity_thresh will be set to dp_norm_shift / norm_shift_to_intensity_scale if not given.
norm_shift_precision = 0.01
norm_shift_to_intensity_scale = 10

; If number of spots assigned to a gene less than or equal to this, `gene_efficiency[g]=1` for all rounds.
gene_efficiency_min_spots = 30

; gene_efficiency is computed from spots which pass the quality_threshold based on the bled_codes computed with the
; gene_efficiency of the previous iteration.
; This process will continue until the gene_effiency converges or gene_efficiency_n_iter iterations are reached.
; 0 means gene_efficiency not used in score calculation.
gene_efficiency_n_iter = 10

; Final accepted spots are those which pass quality_threshold which is
; score > score_thresh and intensity > intensity_thresh
; quality_threshold requires score computed with dot_product_score to exceed this.
; Max score is 1 so must be below this.
score_thresh = 0.25

intensity_thresh =


[omp]

; Can specify z-planes to find spots on
use_z =

; If False, coefs are found through normal least squares fitting.
; If True, coefs are found through weighted least squares fitting
; with rounds/channels which already containing genes contributing less.
weight_coef_fit = False

; To save time in call_spots_omp, coefficients only found for pixels with intensity
; of absolute spot_colors greater than initial_intensity_thresh.
; This threshold is set to initial_intensity_thresh_auto_param * median(absolute_pixel_intensities of middle z-plane)
; It is also clamped between the min and max values.
initial_intensity_thresh =
initial_intensity_thresh_auto_param = 0.5
initial_intensity_thresh_min = 0.001
initial_intensity_thresh_max = 0.5
; initial_intensity_thresh will be rounded to nearest initial_intensity_precision if not given.
initial_intensity_precision = 0.001

; The maximum number of genes that can be assigned to each pixel.
max_genes = 30

; Pixels only have coefficient found for a gene if that gene has absolute dot_product_score greater than this.
; I.e. this is the stopping criterion for the OMP.
dp_thresh = 0.225

; Parameter for fitting_standard_deviation.
; By how much to increase variance as genes added.
alpha = 120

; Parameter for fitting_standard_deviation.
; The variance with no genes added (coef=0) is beta**2.
beta = 1

; Only save spots with number of positive coefficient neighbours greater than this.
initial_pos_neighbour_thresh = 4

; to detect spot in coefficient image of each gene, pixel needs to be above dilation with structuring element which is
; a square (np.ones) of width 2*radius_xy-1 in the xy plane
radius_xy = 3

; to detect spot in coefficient image of each gene, pixel needs to be above dilation with structuring element which is
; cuboid with width 2*radius_z-1 in z direction. Must be more than 1 to be 3D.
radius_z = 2

; spot_shape specifies the neighbourhood about each spot in which we count coefficients which contribute to score.
; It is either given through file_names -> omp_spot_shape or computed using the below parameters with shape prefix.

; Maximum Y, X, Z size of spot_shape.
; Will be less if there are zeros at the extremities.
shape_max_size = 27, 27, 9

; For spot to be used to find spot_shape, it must have this many pixels
; around it on the same z-plane that have a positive coefficient.
; If 3D, also, require 1 positive pixel on each neighbouring plane (i.e. 2 is added to this value).
shape_pos_neighbour_thresh = 9

; Spots are isolated if nearest neighbour (across all genes) is further away than this.
; Only isolated spots are used to find spot_shape.
shape_isolation_dist = 10

; If the mean absolute coefficient sign is less than this in a region near a spot,
; we set the expected coefficient in spot_shape to be 0.
; Max mean absolute coefficient sign is 1 so must be less than this.
shape_sign_thresh = 0.15

; Will use same threshold as ref_spots.intensity_thresh if not provided.
intensity_thresh =

; 0.15 if more concerned for missed spots than false positives.
score_thresh = 0.263

; 0.45 if more concerned for missed spots than false positives.
score_multiplier = 0.95
